"use strict";(self.webpackChunkflutter_sdk_docs=self.webpackChunkflutter_sdk_docs||[]).push([[592],{3905:function(e,a,t){t.d(a,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),c=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},u=function(e){var a=c(e.components);return n.createElement(l.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=r,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return t?n.createElement(f,o(o({ref:a},u),{},{components:t})):n.createElement(f,o({ref:a},u))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9980:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],s={title:"Realm Database"},l=void 0,c={unversionedId:"realm-database",id:"version-alpha/realm-database",title:"Realm Database",description:"Realm Database is a reactive, object-oriented, cross-platform, mobile",source:"@site/flutter_versioned_docs/version-alpha/realm-database.mdx",sourceDirName:".",slug:"/realm-database",permalink:"/flutter-sdk-docs/sdk/flutter/alpha/realm-database",tags:[],version:"alpha",frontMatter:{title:"Realm Database"},sidebar:"flutter",previous:{title:"Quick Start",permalink:"/flutter-sdk-docs/sdk/flutter/alpha/quick-start"}},u=[{value:"Database Internals",id:"database-internals",children:[{value:"Native Database Engine",id:"native-database-engine",children:[],level:3},{value:"Realm Files",id:"realm-files",children:[],level:3},{value:"Copy-on-Write: The Secret Sauce of Data Versioning",id:"copy-on-write-the-secret-sauce-of-data-versioning",children:[],level:3},{value:"Memory Mapping",id:"memory-mapping",children:[],level:3},{value:"Compaction",id:"compaction",children:[],level:3},{value:"ACID Compliance",id:"acid-compliance",children:[],level:3}],level:2},{value:"Features",id:"features",children:[{value:"Queries",id:"queries",children:[],level:3},{value:"Indexes",id:"indexes",children:[],level:3},{value:"Schemas",id:"schemas",children:[],level:3}],level:2}],m={toc:u};function p(e){var a=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Realm Database is a reactive, object-oriented, cross-platform, mobile\ndatabase:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Reactive"),": query the current state of data and subscribe to state\nchanges like the result of a query, or even changes to a single\nobject."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Object-oriented"),": organizes data as objects, rather than rows,\ndocuments, or columns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cross-platform"),": use the same database on iOS, Android, Linux,\nmacOS, or Windows. Just define a schema for each SDK you use."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Mobile"),": designed for the low-power, battery-sensitive, real-time\nenvironment of a mobile device.")),(0,i.kt)("p",null,"Realm Database is an alternative to\n",(0,i.kt)("a",{parentName:"p",href:"https://www.sqlite.org/index.html"},"SQLite")," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/coredata"},"Core\nData"),"."),(0,i.kt)("p",null,"This page explains some of the implementation details and inner workings\nof Realm Database. This page is for you if you are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a developer interested in learning more about Realm Database"),(0,i.kt)("li",{parentName:"ul"},"comparing Realm Database with competing databases")),(0,i.kt)("p",null,"This explanation begins with a deep dive into database internals,\ncontinues with a high-level introduction to some of the features of\nRealm Database."),(0,i.kt)("h2",{id:"database-internals"},"Database Internals"),(0,i.kt)("p",null,"Realm Database uses a completely unique database engine, file format,\nand design. This section describes some of the high-level details of\nthose choices."),(0,i.kt)("h3",{id:"native-database-engine"},"Native Database Engine"),(0,i.kt)("p",null,"Realm Database is an entire database written from scratch in C++,\ninstead of building on top of an underlying database engine like SQLite.\nRealm Database's underlying storage layer uses ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/B%2B_tree"},"B+\ntrees")," to organize objects. As\na result, Realm Database controls optimizations from the storage level\nall the way up to the access level."),(0,i.kt)("p",null,"Realm Database stores data in ",(0,i.kt)("strong",{parentName:"p"},"realms"),": collections of heterogeneous\nrealm objects. You can think of each realm as a database. Each object in\na realm is equivalent to a row in a SQL database table or a MongoDB\ndocument. Unlike SQL, realms do not separate different object types into\nindividual tables."),(0,i.kt)("p",null,"Realm Database stores objects as groups of property values. We call this\ncolumn-based storage. This means that queries or writes for individual\nobjects can be slower than row-based storage equivalents when unindexed,\nbut querying a single field across multiple objects or fetching multiple\nobjects can be much faster due to spatial locality and in-CPU vector\noperations."),(0,i.kt)("p",null,"Realm Database uses a\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Zero-copy"},"zero-copy")," design to make\nqueries faster than an ORM, and often faster than raw SQLite."),(0,i.kt)("h3",{id:"realm-files"},"Realm Files"),(0,i.kt)("p",null,"Realm Database persists data in files saved on device storage. The\ndatabase uses several kinds of file:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"realm files"),', suffixed with "realm", e.g. ',(0,i.kt)("inlineCode",{parentName:"li"},"default.realm"),":\ncontain object data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"lock files"),', suffixed with "lock", e.g. ',(0,i.kt)("inlineCode",{parentName:"li"},"default.realm.lock"),":\nkeep track of which versions of data in a realm are actively in use.\nThis prevents realm from reclaiming storage space that is still used\nby a client application."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"note files"),', suffixed with "note", e.g. ',(0,i.kt)("inlineCode",{parentName:"li"},"default.realm.note"),":\nenable inter-thread and inter-process notifications."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"management files"),', suffixed with "management", e.g.\n',(0,i.kt)("inlineCode",{parentName:"li"},"default.realm.management"),": internal state management.")),(0,i.kt)("p",null,"Realm files contain object data with the following data structures:\nGroups, Tables, Cluster Trees, and Clusters. Realm Database organizes\nthese data structures into a tree structure with the following form:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The top level, known as a Group, stores object metadata, a\ntransaction log, and a collection of Tables."),(0,i.kt)("li",{parentName:"ul"},"Each class in the realm schema corresponds to a Table within the\ntop-level Group."),(0,i.kt)("li",{parentName:"ul"},"Each Table contains a Cluster Tree, an implementation of a B+ tree."),(0,i.kt)("li",{parentName:"ul"},"Leaves on the Cluster Tree are called Clusters. Each contains a\nrange of objects sorted by key value."),(0,i.kt)("li",{parentName:"ul"},"Clusters store objects as collections of columns."),(0,i.kt)("li",{parentName:"ul"},"Each column contains data for a single property for multiple\ninstances of a given object. Columns are arrays of data with\nuniformly sized values."),(0,i.kt)("li",{parentName:"ul"},"Columns store data in one of the following sizes: 1, 2, 4, 8, 16,\n32, or 64 bits. Each column uses one value size, determined by the\nlargest value.")),(0,i.kt)("p",null,"Since pointers refer to memory addresses, objects written to persistent\nfiles cannot store references as pointers. Instead, realm files refer to\ndata using the offset from the beginning of the file. We call this a\nref. As Realm Database uses memory mapping to read and write data,\ndatabase operations translate these refs from offsets to memory pointers\nwhen navigating database structures."),(0,i.kt)("h3",{id:"copy-on-write-the-secret-sauce-of-data-versioning"},"Copy-on-Write: The Secret Sauce of Data Versioning"),(0,i.kt)("p",null,"Realm Database uses a technique called ",(0,i.kt)("strong",{parentName:"p"},"copy-on-write"),", which copies\ndata to a new location on disk for every write operation instead of\noverwriting older data on disk. Once the new copy of data is fully\nwritten, the database updates existing references to that data. Older\ndata is only garbage collected when it is no longer referenced or\nactively in use by a client application."),(0,i.kt)("p",null,"Because of copy-on-write, older copies of data remain valid, since all\nof the references in those copies still point to other valid data. Realm\nDatabase leverages this fact to offer multiple versions of data\nsimultaneously to different threads in client applications. Most\napplications tie data refreshes to the repaint cycle of the looper\nthread that controls the UI, since data only needs to refresh as often\nas the UI does. Longer-running procedures on background threads, such as\nlarge write operations, can work with a single version of data for a\nlonger period of time before committing their changes."),(0,i.kt)("h3",{id:"memory-mapping"},"Memory Mapping"),(0,i.kt)("p",null,"Writes use ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Memory-mapped_file"},"memory\nmapping")," to avoid\ncopying data back and forth from memory to storage. Accessors and\nmutators read and write to disk via memory mapping. As a result, object\ndata is never stored on the stack or heap of your app. By default, data\nis memory-mapped as read-only to prevent accidental writes."),(0,i.kt)("p",null,"Realm Database uses operating system level paging, trusting each\noperating system to implement memory mapping and persistence better than\na single library could on its own."),(0,i.kt)("h3",{id:"compaction"},"Compaction"),(0,i.kt)("p",null,"Realm Database automatically reuses free space that is no longer needed\nafter database writes. However, realm files never shrink automatically,\neven if the amount of data stored in your realm decreases significantly.\nCompact your realm to optimize storage space and decrease file size if\npossible."),(0,i.kt)("p",null,"You should compact your realms occasionally to keep them at an optimal\nsize. You can do this manually, or by configuring your realms to compact\non launch. However, Realm Database reclaims unused space for future\nwrites, so compaction is only an optimization to conserve space\non-device."),(0,i.kt)("h3",{id:"acid-compliance"},"ACID Compliance"),(0,i.kt)("p",null,"Realm Database guarantees that transactions are\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ACID"},"ACID")," compliant.\nThis means that all committed write operations are\nguaranteed to be valid and that clients don't see transient states in\nthe event of a system crash. Realm Database complies with ACID with the\nfollowing design choices:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Atomicity_(database_systems)"},"Atomicity"),":\ngroups operations in transactions and rolls back all operations in a\ntransaction if any of them fail."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Consistency_(database_systems)"},"Consistency"),":\navoids data corruption by validating changes against the schema. If\nthe result of any write operation is not valid, Realm cancels and\nrolls back the entire transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Isolation_(database_systems)"},"Isolation"),":\nallows only one writer at a time. This ensures thread safety between\ntransactions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Durability_(database_systems)"},"Durability"),":\nwrites to disk immediately when a transaction is committed. In the\nevent of an app crash, for example, changes are not lost or\ncorrupted.")),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("p",null,"Realm Database supports many popular database features."),(0,i.kt)("h3",{id:"queries"},"Queries"),(0,i.kt)("p",null,"You can query Realm Database using platform-native queries or a raw\nquery language that works across platforms."),(0,i.kt)("h3",{id:"indexes"},"Indexes"),(0,i.kt)("p",null,"Indexes are implemented as trees containing values of a given property\ninstead of a unique internal object key. This means that indexes only\nsupport one column, and thus only one property, at a time."),(0,i.kt)("h3",{id:"schemas"},"Schemas"),(0,i.kt)("p",null,"Every realm object has a schema. That schema is defined via a native\nobject in your SDK's language. Object schemas can include embedded lists\nand relations between object instances."),(0,i.kt)("p",null,"Each realm uses a versioned schema. When that schema changes, you must\ndefine a migration to move object data between schema versions. Additive\nschema changes happen automatically, but your SDK may require you to\nincrease the local schema version to begin using the updated schema in\nyour app. Destructive changes require a migration function. See your\nSDK's documentation for more information on migrations."))}p.isMDXComponent=!0}}]);